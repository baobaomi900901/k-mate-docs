name: Deploy Docs site to Pages
on:
  push:
    branches:
      - main
    paths:
      - "docs/**"
      - ".github/workflows/deployDocs.yml"
  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

# 全局变量
env:
  TARGET: "/www/wwwroot/k-mate-docs"

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # - name: Setup Pages
      #   uses: actions/configure-pages@v4

      - name: Install dependencies
        run: |
          npm i
      - name: Build with VitePress
        run: |
          npm run docs:build && cd "docs/.vitepress" && tar -zcvf dist.tar.gz ./dist
      # - name: Upload pages artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: docs/.vitepress/dist
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VitePress-artifact
          path: |
            docs/.vitepress/dist
            docs/.vitepress/dist.tar.gz

  # 部署 GitHub Pages
  # deploy-github-pages:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   needs: build
  #   runs-on: ubuntu-latest
  #   name: Deploy
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  #       continue-on-error: true  # 即使失败，也继续下一个步骤

  # 部署到 Centos 服务器
  deploy-centos:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download project files
        uses: actions/download-artifact@v4
        with:
          name: VitePress-artifact

      - name: Copy file to centos server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.REMOTE_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist.tar.gz"
          target: ${{ env.TARGET }}

      - name: Deploy dist
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: ${{ secrets.REMOTE_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami
            cd ${{ env.TARGET }}
            find . -mindepth 1 ! -name 'dist.tar.gz' -exec rm -rf {} +
            tar -xvf dist.tar.gz --strip-components 2

      - name: Deploy local dist
        env:
          HOST_URL: ${{ secrets.DEPLOY_WEBHOOK_HOST_URL }}
          API_KEY: ${{ secrets.DEPLOY_WEBHOOK_API_KEY }}
          DIST_URL: ${{ secrets.DEPLOY_WEBHOOK_DIST_URL }}
          TARGET: ${{ secrets.DEPLOY_WEBHOOK_TARGET }}
        run: |
          curl --location "$HOST_URL" \
            --max-time 900 \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $API_KEY" \
            --data "{
                \"url\": \"$DIST_URL\",
                \"target\": \"$TARGET\"
            }"

      # - name: Deploy to Centos server
      #   uses: easingthemes/ssh-deploy@main
      #   with:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     ARGS: "-rlgoDzv -i --delete"
      #     SOURCE: "./"
      #     REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      #     REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
      #     REMOTE_USER: ${{ secrets.REMOTE_USER }}
      #     TARGET: ${{ secrets.TARGET }}
      #     EXCLUDE: "/dist/, /docs/.vitepress/dist/, /node_modules/"
      #     SCRIPT_BEFORE: |
      #       whoami
      #       ls -al
      #     SCRIPT_AFTER: |
      #       whoami
      #       ls -al
      #       echo $RSYNC_STDOUT
      #   continue-on-error: true  # 即使失败，也继续下一个步骤

  scrape-docs:
    needs: deploy-centos
    runs-on: ubuntu-latest
    name: scrape and push content on Meilisearch instance
    steps:
      - uses: actions/checkout@v4

      - name: Run docs-scraper
        env:
          HOST_URL: ${{ secrets.MEILISEARCH_HOST_URL }}
          API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
          ZH_CONFIG_FILE_PATH: ${{ github.workspace }}/docs-scraper/k-rpa-lite.zh.docs-scraper.config.json
          EN_CONFIG_FILE_PATH: ${{ github.workspace }}/docs-scraper/k-rpa-lite.en.docs-scraper.config.json
        run: |
          echo "抓取中文站点"
          docker run -t --rm \
            -e MEILISEARCH_HOST_URL=$HOST_URL \
            -e MEILISEARCH_API_KEY=$API_KEY \
            -v $ZH_CONFIG_FILE_PATH:/docs-scraper/config.json \
            donxj/docs-scraper:0.0.1 pipenv run ./docs_scraper config.json
          
          echo "抓取英文站点"
          docker run -t --rm \
            -e MEILISEARCH_HOST_URL=$HOST_URL \
            -e MEILISEARCH_API_KEY=$API_KEY \
            -v $EN_CONFIG_FILE_PATH:/docs-scraper/config.json \
            donxj/docs-scraper:0.0.1 pipenv run ./docs_scraper config.json